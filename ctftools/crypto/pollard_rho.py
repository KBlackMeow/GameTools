# nbits = 2048
# gbits = 1000
# g = getPrime(int(gbits))
# while True:
#     a = getPrime(int(nbits*0.5)-gbits)
#     p = 2*g*a + 1
#     if isPrime(p):
#         break

# while True:
#     b = getPrime(int(nbits*0.5)-gbits)
#     q = 2*g*b + 1
#     if p!=q and isPrime(q):
#         break
# N = p*q

def gcd(a, b):
    while b:
        a, b = b, a%b
    return a

def mapx(x):
    x=(pow(x,n-1,n)+3)%n    #pow(x,n-1,n)是为了减小数值，加速运算，
    return x

def pollard_rho (x1,x2):
    while True:
        x1=mapx(x1)
        x2=mapx(mapx(x2))
        p=gcd(x1-x2,n)
        if (p == n):
            print("fail")
            return
        elif (p!=1):
            print("p: "+str(p))
            print("q: "+str(n//p))
            break
def main():
    pollard_rho(1,1)
    return 

n=49025724928152491719950645039355675823887062840095001672970308684156817293484070166684235178364916522473822184239221170514602692903302575847326054102901449806271709230774063675539139201327878971370342483682454617270705142999317092151456200639975738970405158598235961567646064089356496022247689989925574384915789399433283855087561428970245448888799812611301566886173165074558800757040196846800189738355799057422298556992606146766063202605288257843684190291545600282197788724944382475099313284546776350595539129553760118549158103804149179701853798084612143809757187033897573787135477889183344944579834942896249251191453
      
main()

